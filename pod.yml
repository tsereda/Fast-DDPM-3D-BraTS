apiVersion: v1
kind: Pod
metadata:
  name: tsereda-brats-pod
  labels:
    app: fast-ddpm-brats
spec:
  securityContext:
    fsGroup: 0
  nodeSelector:
    topology.kubernetes.io/region: us-west
  containers:
    - name: brats-processing
      image: gitlab-registry.nrp-nautilus.io/prp/jupyter-stack/prp
      env:
        - name: REPO_PATH
          value: /app/Fast-DDPM-3D-BraTS
        - name: SYNAPSE_AUTHTOKEN
          valueFrom:
            secretKeyRef:
              name: synapse-credentials
              key: authtoken
              optional: true
        - name: PYTHONPATH
          value: /app/Fast-DDPM-3D-BraTS
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
      command:
        - "bash"
        - "-c"
      args:
        - |
          set -e  # Exit on any error
          
          echo "üöÄ Starting Fast-DDPM-3D-BraTS Setup..."
          
          # Update system packages
          echo "üì¶ Updating system packages..."
          sudo apt-get update && sudo apt-get install -y p7zip-full wget git vim htop
          
          # Clone repository
          echo "üìÇ Cloning repository..."
          if [ ! -d "${REPO_PATH}" ]; then
            git clone https://github.com/tsereda/Fast-DDPM-3D-BraTS.git ${REPO_PATH}
          fi
          cd ${REPO_PATH}
          
          # Check for data files
          echo "üìä Checking for data files..."
          if [ -f "/data/ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData.zip" ]; then
            echo "‚úì Found training data"
            cp /data/ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData.zip .
            echo "üì¶ Extracting training data..."
            7z x ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData.zip -y -mmt=$(nproc) || {
              echo "‚ö†Ô∏è Training data extraction failed, continuing without it"
            }
          else
            echo "‚ö†Ô∏è Training data not found in /data/"
          fi
          
          if [ -f "/data/ASNR-MICCAI-BraTS2023-GLI-Challenge-ValidationData.zip" ]; then
            echo "‚úì Found validation data"
            cp /data/ASNR-MICCAI-BraTS2023-GLI-Challenge-ValidationData.zip .
            echo "üì¶ Extracting validation data..."
            7z x ASNR-MICCAI-BraTS2023-GLI-Challenge-ValidationData.zip -y -mmt=$(nproc) || {
              echo "‚ö†Ô∏è Validation data extraction failed, continuing without it"
            }
          else
            echo "‚ö†Ô∏è Validation data not found in /data/"
          fi
          
          # Setup environment
          echo "üêç Setting up Python environment..."
          cd ${REPO_PATH}
          
          # Initialize conda
          eval "$(conda shell.bash hook)"
          
          # Check if environment exists
          if conda env list | grep -q "brasyn"; then
            echo "‚úì Environment brasyn already exists, activating..."
            conda activate brasyn
          else
            echo "üîß Creating brasyn environment..."
            if [ -f "environment.yml" ]; then
              # Try with mamba first, fall back to conda
              if command -v mamba &> /dev/null; then
                echo "Using mamba for faster installation..."
                mamba env create -f environment.yml -y || {
                  echo "‚ö†Ô∏è Mamba failed, trying conda..."
                  conda env create -f environment.yml -y
                }
              else
                conda env create -f environment.yml -y
              fi
              conda activate brasyn
            else
              echo "‚ö†Ô∏è environment.yml not found, creating minimal environment..."
              conda create -n brasyn python=3.11 -y
              conda activate brasyn
              
              # Install essential packages
              pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118
              pip install numpy nibabel SimpleITK tqdm PyYAML matplotlib scipy pandas opencv-python scikit-image
              pip install gdown wandb lpips einops accelerate
            fi
          fi
          
          # Verify environment
          echo "üîç Verifying environment..."
          python -c "import torch; print(f'PyTorch: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}'); print(f'GPU count: {torch.cuda.device_count()}')"
          
          # Run basic tests
          echo "üß™ Running basic tests..."
          if [ -f "test_comprehensive.py" ]; then
            python test_comprehensive.py || echo "‚ö†Ô∏è Some tests failed, continuing..."
          fi
          
          if [ -f "test_3d_model.py" ]; then
            python test_3d_model.py || echo "‚ö†Ô∏è 3D model test failed, continuing..."
          fi
          
          # Quick fixes if needed
          if [ -f "quick_fixes.py" ]; then
            echo "üîß Applying quick fixes..."
            python quick_fixes.py || echo "‚ö†Ô∏è Quick fixes failed, continuing..."
          fi
          
          # Setup nnUNet directories if needed
          export nnUNet_raw="/app/nnunet/raw"
          export nnUNet_preprocessed="/app/nnunet/preprocessed" 
          export nnUNet_results="/app/nnunet/results"
          mkdir -p /app/nnunet/{raw,preprocessed,results}
          
          # Convert data to nnUNet format if script exists
          if [ -f "Dataset137_BraTS21.py" ] && [ -d "ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData" ]; then
            echo "üîÑ Converting data to nnUNet format..."
            python Dataset137_BraTS21.py || echo "‚ö†Ô∏è Data conversion failed, continuing..."
          fi
          
          echo "‚úÖ Setup complete!"
          echo "üìã Available commands:"
          echo "  - Training: python scripts/train_3d.py --data_root ./ASNR-MICCAI-BraTS2023-GLI-Challenge-TrainingData --debug"
          echo "  - Inference: python scripts/inference_3d.py --help"
          echo "  - Environment check: python verify_environment.py"
          echo ""
          echo "üñ•Ô∏è  Container will stay alive. Connect with:"
          echo "    kubectl exec -it tsereda-brats-pod -- /bin/bash"
          echo ""
          
          # Mark setup as complete for readiness probe
          touch /tmp/setup_complete
          
          # Keep container running
          tail -f /dev/null
      volumeMounts:
        - name: git-repo
          mountPath: /app
        - name: brats-data-volume
          mountPath: /data
        - name: dshm
          mountPath: /dev/shm
      resources:
        limits:
          memory: 32Gi
          cpu: "16"
          nvidia.com/gpu: "1"
        requests:
          memory: 24Gi
          cpu: "12"
          nvidia.com/gpu: "1"
      securityContext:
        runAsUser: 0
        capabilities:
          add:
            - SYS_NICE
            - IPC_LOCK
      # Add liveness and readiness probes for better pod management
      livenessProbe:
        exec:
          command:
            - /bin/bash
            - -c
            - "ps aux | grep -v grep | grep -q tail || exit 1"
        initialDelaySeconds: 300
        periodSeconds: 60
        timeoutSeconds: 10
        failureThreshold: 3
      readinessProbe:
        exec:
          command:
            - /bin/bash
            - -c
            - "test -f /tmp/setup_complete"
        initialDelaySeconds: 60
        periodSeconds: 30
        timeoutSeconds: 5
        failureThreshold: 10
  volumes:
    - name: git-repo
      emptyDir:
        sizeLimit: 20Gi
    - name: brats-data-volume
      persistentVolumeClaim:
        claimName: brats2025-1
    - name: dshm
      emptyDir:
        medium: Memory
        sizeLimit: 16Gi
  restartPolicy: Never
  terminationGracePeriodSeconds: 30